;
; supervisord config file for {{NAME}} version {{VERSION}} in {{MODE}} mode.
;
; Templated on node {{HOSTNAME}} on {{DATETIME}} by {{USER}}.
;
; Most configuration is set at templating time, but the
; following environmental variables that enable relocatability are required
; to be set:
;
;    {{NAME.upper()}}_ROOT  -- the parent of the bin/ and /etc directories.
;    {{NAME.upper()}}_VAR   -- the parent of the redis/ and run/ directories.
;    {{NAME.upper()}}_TMP   -- where temporary files will go; most processes run here.
;    {{NAME.upper()}}_LOG   -- where the log files go.
;
[supervisord]
logfile=%(ENV_{{NAME.upper()}}_LOG)s/supervisord.log
logfile_maxbytes={{LOGFILE_MAXBYTES}}
logfile_backups={{LOGFILE_BACKUPCOUNT}}
loglevel=info
pidfile=%(ENV_{{NAME.upper()}}_VAR)s/run/supervisord.pid
nodaemon=false
minfds=512
minprocs=100
umask={{PROCESS_UMASK}}
user={{USER}}
identifier={{NAME}}-supervisor
directory=%(ENV_{{NAME.upper()}}_TMP)s
childlogdir=%(ENV_{{NAME.upper()}}_LOG)s

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

{% if SUPERVISORD_UNIX_SOCKET %}; supervisord uses unix sockets
[unix_http_server]
file=%(ENV_{{NAME.upper()}}_VAR)s/run/supervisord.sock
{% else %}; use network port
[inet_http_server]
port={{SUPERVISORD_HOST}}{{ ':' }}{{SUPERVISORD_PORT}}
username={{SUPERVISORD_USER}}
password={{SECRET_KEY}}
{% endif %}
[supervisorctl]
serverurl={{SUPERVISORD_SERVERURL}}
username={{SUPERVISORD_USER}}
password={{SECRET_KEY}}
prompt={{NAME}}-supervisor
history_file=%(ENV_{{NAME.upper()}}_VAR)s/run/sc_history

{% if SUPERVISORD_START_SERVER %}
[program:{{NAME}}]
{% if DEBUG %}; launch in debug mode
command={{NAME}} run
{% else %}; launch in production mode
command=gunicorn --bind {{GUNICORN_URL}} --capture-output --enable-stdio-inheritance --log-level {{GUNICORN_LOG_LEVEL}} {{NAME}}_run{{ ':' }}app
{% endif %}
directory=%(ENV_{{NAME.upper()}}_ROOT)s/bin
startsecs=10
redirect_stderr=true
stdout_logfile=%(ENV_{{NAME.upper()}}_LOG)s/{{NAME}}_server.log
stdout_logfile_maxbytes={{LOGFILE_MAXBYTES}}
stdout_logfile_backups={{LOGFILE_BACKUPCOUNT}}
umask={{PROCESS_UMASK}}
user={{USER}}
priority=30
startretries=1
autorestart=unexpected
{% endif %}

{% if SUPERVISORD_START_NGINX %}
[program:nginx]
command=nginx -c%(ENV_{{NAME.upper()}}_ROOT)s/etc/nginx/nginx.conf
directory=%(ENV_{{NAME.upper()}}_VAR)s/run
startsecs=10
user={{USER}}
priority=100
startretries=3
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxtypes=0
autorestart=true
{% endif %}

{% if SUPERVISORD_START_REDIS %}
[program:redis]
command=redis-server %(ENV_{{NAME.upper()}}_ROOT)s/etc/redis.conf
directory=%(ENV_{{NAME.upper()}}_VAR)s/redis
startsecs=5
redirect_stderr=true
stdout_logfile=%(ENV_{{NAME.upper()}}_LOG)s/redis.log
stdout_logfile_maxbytes={{LOGFILE_MAXBYTES}}
stdout_logfile_backups={{LOGFILE_BACKUPCOUNT}}
umask={{PROCESS_UMASK}}
user={{USER}}
priority=90
startretries=3
autorestart=unexpected
{% endif %}

{% for queue in START_QUEUES %}
[program:{{queue}}]
command=lorax rq worker {{queue}}
directory=%(ENV_{{NAME.upper()}}_TMP)s
startsecs=10
redirect_stderr=true
stdout_logfile=%(ENV_{{NAME.upper()}}_LOG)s/{{queue}}.log
stdout_logfile_maxbytes={{LOGFILE_MAXBYTES}}
stdout_logfile_backups={{LOGFILE_BACKUPCOUNT}}
umask={{PROCESS_UMASK}}
user={{USER}}
priority=80
startretries=1
autorestart=unexpected
{% endfor %}

{% if SUPERVISORD_START_CRASHMAIL %}
[eventlistener:crashmail]
command=crashmail -a -m {{CRASHMAIL_EMAIL}}
events={{CRASHMAIL_EVENTS}}
user={{USER}}
directory=%(ENV_{{NAME.upper()}}_TMP)s
{% endif %}

