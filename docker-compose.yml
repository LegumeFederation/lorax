x-app: &default-rq
    image: lorax:latest
    depends_on:
      redis:
        condition: service_healthy
# in case "lorax" image is rebuilt
      flask:
        condition: service_started
    restart: always 
    environment:
      GUNICORN_CMD_ARGS: "--workers=2"
      # number of threads for raxml & hmmalign
      OMP_NUM_THREADS: 1
    volumes:
      - data:/usr/local/var/data

services:
  flask:
    build: .
    image: lorax:latest
    healthcheck:
      test: "curl -q http://localhost:8000/status"
    restart: always
    ports:
      - "${PORT}:8000"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - data:/usr/local/var/data

  load:
    image: lorax:latest
    depends_on:
      flask:
        condition: service_healthy
    environment:
      LORAX_CURL_URL: flask:8000
    working_dir: /usr/local/var/data
    command: /usr/src/app/lorax/test/install_families.sh
    profiles:
      - load
    volumes:
      - data:/usr/local/var/data

  redis:
    image: redis:6.2.4-alpine3.14
    restart: always
    healthcheck:
      test: "redis-cli ping"

  rq_worker_alignment:
    <<: *default-rq
    command: rq worker --url redis://redis:6379 alignment

  rq_worker_treebuilding:
    <<: *default-rq
    command: rq worker --url redis://redis:6379 treebuilding

# https://github.com/Parallels/rq-dashboard#installing-with-docker
  rq_dashboard:
    image: eoranged/rq-dashboard:v0.6.3
    environment:
      RQ_DASHBOARD_REDIS_URL: redis://redis:6379
    ports:
      - "9181:9181"
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - rq_dashboard

  test:
    image: lorax:latest
     # testing
    environment:
      LORAX_CURL_URL: flask:8000
    depends_on:
      flask:
        condition: service_started
      rq_worker_alignment:
        condition: service_started
      rq_worker_treebuilding:
        condition: service_started
    working_dir: /usr/src/app/lorax/test
    command: ./test_targets.sh
    profiles:
      - test

volumes:
  data:
